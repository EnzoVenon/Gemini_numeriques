{"mappings":"AAEA,IAAIA,EAAS,GA8DN,SAASC,EAAeC,GAE3B,IAAIC,EAAQ,IAAIC,OAAOC,MAAMC,MAC7B,MAA2B,gBAAvBJ,EAAWK,QACJJ,EAAMK,IAAI,UACa,WAAvBN,EAAWK,QACXJ,EAAMK,IAAI,UACa,2BAAvBN,EAAWK,QACXJ,EAAMK,IAAI,SACa,cAAvBN,EAAWK,QACXJ,EAAMK,IAAI,SACa,YAAvBN,EAAWK,QACXJ,EAAMK,IAAI,SAGdL,EAAMK,IAAI,QACrB,CAGO,SAASC,EAAkBP,GAC9B,OAAOA,EAAWQ,qBACtB,CAGO,SAASC,EAAiBT,GAC7B,OAAOA,EAAWU,OACtB,CAEO,SAASC,EAAcX,GAC1B,QAASA,EAAWU,OACxB,CC7EAR,OAAOU,MAAMC,KAAK,YAAa,0IAG/B,MACMC,EAAY,CACdC,MAAO,IAAIb,OAAOc,YAAY,YAAa,OAAS,SACpDC,MAAO,IACPC,KAAM,IAGJC,EAAYC,SAASC,eAAe,aAGpCC,EAAO,IAAIpB,OAAOqB,UAAUJ,EAAWL,GAe7C,SAASU,EAA4BC,GACjCA,EAAOC,OAAS,IAAIxB,OAAOyB,WAAWF,EAAOC,QAC7C,MAAME,EAAQ,IAAI1B,OAAO2B,eAAeJ,EAAOK,GAAIL,GACnDH,EAAKS,SAASH,GAAOI,KAAKC,EAAUC,YAAYC,KAAKF,GACzD,CAlBAG,mBAAmBjB,EAAWG,GAM9BpB,OAAOmC,QAAQC,KAAK,wCAAwCN,MAAK,SAAWP,GACxEA,EAAOC,OAAS,IAAIxB,OAAOyB,WAAWF,EAAOC,QAC7C,MAAME,EAAQ,IAAI1B,OAAOqC,WAAW,QAASd,GAC7CH,EAAKS,SAASH,GAAOI,KAAKC,EAAUC,YAAYC,KAAKF,GACzD,IASA/B,OAAOmC,QAAQC,KAAK,4CAA4CN,KAAKR,GACrEtB,OAAOmC,QAAQC,KAAK,kDAAkDN,KAAKR,GAqB3EF,EAAKkB,kBAAkBtC,OAAOuC,iBAAiBC,eDpExC,WACH,IAAIC,EACAC,EAKJ,IAHI9C,EAAO+C,QACPC,KAAKC,aAAaD,KAAKE,OAAOC,UAAU,GAEvCN,EAAI,EAAGA,EAAI7C,EAAO+C,OAAQF,IAC3BC,EAAO9C,EAAO6C,GACVC,IACAA,EAAKM,MAAMC,EAAIC,KAAKC,IAChB,EAAKT,EAAKM,MAAMC,EAAI,IACxBP,EAAKU,mBAAkB,IAG/BxD,EAASA,EAAOyD,QAAO,SAAgBC,GAAK,OAAOA,EAAEN,MAAMC,EAAI,CAAG,GACtE,IC4FA,MAAMM,ED1FC,SAAuBC,EAAWC,EAASC,EAAUC,EAAKC,EAAKC,EAAQC,EAAQC,GAGlF,MAAMC,EAAiB,IAAIhE,OAAOiE,UAAU,CACxCC,IAAKV,EACLC,QAASA,EACTU,SAAUT,EACVC,IAAKA,EACLC,IAAKA,EACLC,OAAQA,EACRC,OAAQA,IAyBZ,MAAO,CAAEpC,MArBS,IAAI1B,OAAOoE,qBAAqB,eAAgB,CAC9DC,QAAS,SAAUC,EAAUC,GAAa,OAAOA,CAAW,EAC5DC,cAAe,SAAgB9B,GAC3BA,EAAK+B,SAASC,SAAQC,IAClBA,EAAE3B,MAAMC,EAAI,IACZrD,EAAOgF,KAAKD,EAAA,GAEpB,EACAtB,OAAQ5C,EACRe,OAAQwC,EACRa,KAAM,CAAE1B,IAAKY,GAEbe,MAAO,IAAI9E,OAAO+E,MAAM,CACpBC,KAAM,CACFjF,MAAOF,EACPoF,cAAe5E,EACf6E,iBAAkB3E,OAKH4E,SAAUvF,EACzC,CCsDyB,CACrB,iDACA,QACA,qBACA,YACA,MACA,mBACA,CACIwF,KAAM,OACNC,KAAM,OACNC,MAAO,SACPC,MAAO,SAEX,IAEJnE,EAAKS,SAAS0B,GAEd,MAAMxB,EAAY,IAAIyD,SAAS,UAAWpE,GAS1C,SAASqE,EAAQC,GACb,GAAItE,EAAKuE,SAASC,SAAU,CACxB,MAAMC,EAAW3E,SAASC,eAAe,QACnC2E,EAAa1E,EAAK2E,cAAcL,EAAO,EAAG,gBAChD,IAAI5F,EACAkG,EACA3B,EAEJwB,EAASI,UAAY,IAEjBH,EAAWnD,SACX0B,EAAUyB,EAAW,GAAGI,OAAOC,SAASC,WAAW/B,QAAQgC,MAAMP,EAAW,GAAGQ,KAAKC,GACpFzG,EAAagG,EAAW,GAAGI,OAAOM,QAAQC,WAAWpC,GAASvE,WAE9D4G,OAAOC,KAAK7G,GAAY8G,KAAI,SAAUC,GAClC,MAAMC,EAAQhH,EAAW+G,GACzB,GAAIC,EAAO,CACP,MAAMC,EAAMF,EAAUG,WACP,MAAXD,EAAI,IAAsB,kBAARA,IAClBf,EAAOc,EAAME,WACbnB,EAASI,WAAa,UAAYc,EAAM,SAAWf,EAAO,QAElE,CACJ,IAER,CACJ,CAjCA5E,EAAK6F,iBAAiBjH,OAAOkH,kBAAkBC,mBAAmB,WAE9DC,QAAQpB,KAAK,oBACjB,IAEAqB,MAAMC,kBAAkBvF,EAAUwF,IAAKnG,GA8BvC,IAAK,MAAMM,KAASN,EAAKoG,YAEJ,iBAAb9F,EAAME,IACNF,EAAM+F,UAAU3F,MAAK,SAAWJ,GAC5B,MAAM6F,EAAMF,MAAMK,cAAcC,sBAAsB5F,EAAUwF,IAAKnG,EAAMM,GAC3E2F,MAAMK,cAAcE,qBAAqBL,EAAKnG,EAAMM,GACpDmG,OAAOZ,iBAAiB,YAAaxB,GAAS,EAClD","sources":["src/models/building.js","src/main.js"],"sourcesContent":["\n\nlet meshes = [];\n\nexport function update(/* dt */) {\n    let i;\n    let mesh;\n    // console.log(\"update\")\n    if (meshes.length) {\n        view.notifyChange(view.camera.camera3D, true);\n    }\n    for (i = 0; i < meshes.length; i++) {\n        mesh = meshes[i];\n        if (mesh) {\n            mesh.scale.z = Math.min(\n                1.0, mesh.scale.z + 0.1);\n            mesh.updateMatrixWorld(true);\n        }\n    }\n    meshes = meshes.filter(function filter(m) { return m.scale.z < 1; });\n};\n\nexport function buildingLayer(serverURL, version, nameType, crs, ipr, format, extent, zoomMinLayer) {\n\n    // Source\n    const geometrySource = new itowns.WFSSource({\n        url: serverURL,\n        version: version,\n        typeName: nameType,\n        crs: crs,\n        ipr: ipr,\n        format: format,\n        extent: extent\n    });\n\n    // Geometry Layer\n    const geomLayer = new itowns.FeatureGeometryLayer('WFS Building', {\n        batchId: function (property, featureId) { return featureId; },\n        onMeshCreated: function scaleZ(mesh) {\n            mesh.children.forEach(c => {\n                c.scale.z = 0.01;\n                meshes.push(c);\n            })\n        },\n        filter: acceptFeature,\n        source: geometrySource,\n        zoom: { min: zoomMinLayer },\n\n        style: new itowns.Style({\n            fill: {\n                color: colorBuildings,\n                base_altitude: altitudeBuildings,\n                extrusion_height: extrudeBuildings,\n            }\n        })\n    });\n\n    return { layer: geomLayer, meshList: meshes };\n}\n\n\n\n\n// Coloring the data\nexport function colorBuildings(properties) {\n\n    let color = new itowns.THREE.Color();\n    if (properties.usage_1 === 'Résidentiel') {\n        return color.set(0xFDFDFF);\n    } else if (properties.usage_1 === 'Annexe') {\n        return color.set(0xC6C5B9);\n    } else if (properties.usage_1 === 'Commercial et services') {\n        return color.set(0x62929E);\n    } else if (properties.usage_1 === 'Religieux') {\n        return color.set(0x393D3F);\n    } else if (properties.usage_1 === 'Sportif') {\n        return color.set(0x546A7B);\n    }\n\n    return color.set(0x555555);\n}\n\n// Placing the data on the ground\nexport function altitudeBuildings(properties) {\n    return properties.altitude_minimale_sol;\n}\n\n// Extruding the data \nexport function extrudeBuildings(properties) {\n    return properties.hauteur;\n}\n\nexport function acceptFeature(properties) {\n    return !!properties.hauteur;\n}\n\n/* Properties example:\n    altitude_maximale_sol: 190.9\n     altitude_maximale_toit: 194\n    altitude_minimale_sol: 190.1\n    altitude_minimale_toit: 193.5\n    appariement_fichiers_fonciers: null\n    bbox: Array(4) [ 0.74671617, 45.1690315, 0.74672584, … ]\n    construction_legere: true\n    date_creation: \"2012-02-22T12:29:23.469Z\"\n    date_d_apparition: null\n    date_de_confirmation: null\n    date_modification: \"2022-05-12T23:19:01.410Z\"\n    etat_de_l_objet: \"En service\"\n    geojson: Object { id: \"batiment.BATIMENT0000000296089808\", geometry_name: \"geometrie\" }\n    hauteur: 3.4\n    identifiants_sources: \"\"\n    materiaux_de_la_toiture: null\n    materiaux_des_murs: null\n    methode_d_acquisition_altimetrique: \"Interpolation bâti BDTopo\"\n    methode_d_acquisition_planimetrique: \"BDParcellaire recalée\"\n    nature: \"Indifférenciée\"\n    nombre_d_etages: null\n    nombre_de_logements: null\n    origine_du_batiment: \"Cadastre\"\n    precision_altimetrique: 2.5\n    precision_planimetrique: 3\n    sources: null\n    style: Object { isStyle: true, order: 0, parent: {…}, … }\n    usage_1: \"Indifférencié\"\n    usage_2: null\n    <prototype>: Object { … }\n*/\n\n","// https://github.com/iTowns/itowns/blob/master/examples/source_stream_wfs_3d.html\n\nimport { update, buildingLayer, colorBuildings, altitudeBuildings, acceptFeature, extrudeBuildings } from \"./models/building\";\n\n// ----------------- Global variables ----------------- //\n\nlet meshes = [];\nlet scaler;\nconst extent = {\n    west: 0.67289,\n    east: 0.74665,\n    south: 45.17272,\n    north: 45.2135,\n};\n\n// ----------------- View Setup ----------------- //\n// Define crs projection that we will use (taken from https://epsg.io/3946, Proj4js section)\nitowns.proj4.defs('EPSG:3946', '+proj=lcc +lat_1=45.25 +lat_2=46.75 +lat_0=46 +lon_0=3 +x_0=1700000 +y_0=5200000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs');\n\n// Define initial camera position\nconst positionOnGlobe = { longitude: 0.71829, latitude: 45.18260, altitude: 3000 };\nconst placement = {\n    coord: new itowns.Coordinates('EPSG:4326', 0.71829, 45.18260),\n    range: 3000,\n    tilt: 30,\n}\n\nconst viewerDiv = document.getElementById('viewerDiv');\n\n// Instanciate iTowns GlobeView\nconst view = new itowns.GlobeView(viewerDiv, placement);\nsetupLoadingScreen(viewerDiv, view);\n\n\n\n// ----------------- Layer Setup ----------------- //\n// Ortho Layer\nitowns.Fetcher.json('../data/layers/JSONLayers/Ortho.json').then(function _(config) {\n    config.source = new itowns.WMTSSource(config.source);\n    const layer = new itowns.ColorLayer('Ortho', config);\n    view.addLayer(layer).then(menuGlobe.addLayerGUI.bind(menuGlobe));\n});\n\n// Elevation layers\n// These will deform iTowns globe geometry to represent terrain elevation.\nfunction addElevationLayerFromConfig(config) {\n    config.source = new itowns.WMTSSource(config.source);\n    const layer = new itowns.ElevationLayer(config.id, config);\n    view.addLayer(layer).then(menuGlobe.addLayerGUI.bind(menuGlobe));\n}\nitowns.Fetcher.json('../data/layers/JSONLayers/WORLD_DTM.json').then(addElevationLayerFromConfig);\nitowns.Fetcher.json('../data/layers/JSONLayers/IGN_MNT_HIGHRES.json').then(addElevationLayerFromConfig);\n\n\n// scaler = function update(/* dt */) {\n//     let i;\n//     let mesh;\n//     // console.log(\"update\")\n//     if (meshes.length) {\n//         view.notifyChange(view.camera.camera3D, true);\n//     }\n//     for (i = 0; i < meshes.length; i++) {\n//         mesh = meshes[i];\n//         if (mesh) {\n//             mesh.scale.z = Math.min(\n//                 1.0, mesh.scale.z + 0.1);\n//             mesh.updateMatrixWorld(true);\n//         }\n//     }\n//     meshes = meshes.filter(function filter(m) { return m.scale.z < 1; });\n// };\n\nview.addFrameRequester(itowns.MAIN_LOOP_EVENTS.BEFORE_RENDER, update);\n\n// Buildings Layer\n// const wfsBuildingSource = new itowns.WFSSource({\n//     url: 'https://wxs.ign.fr/topographie/geoportail/wfs?',\n//     version: '2.0.0',\n//     typeName: 'BDTOPO_V3:batiment',\n//     crs: 'EPSG:4326',\n//     ipr: 'IGN',\n//     format: 'application/json',\n//     extent: {\n//         west: 0.67289,\n//         east: 0.74665,\n//         south: 45.17272,\n//         north: 45.2135,\n//     },\n// });\n\n\n// const wfsBuildingLayer = new itowns.FeatureGeometryLayer('WFS Building', {\n//     batchId: function (property, featureId) { return featureId; },\n//     onMeshCreated: function scaleZ(mesh) {\n//         mesh.children.forEach(c => {\n//             c.scale.z = 0.01;\n//             meshes.push(c);\n//         })\n//     },\n//     filter: acceptFeature,\n//     source: wfsBuildingSource,\n//     zoom: { min: 14 },\n\n//     style: new itowns.Style({\n//         fill: {\n//             color: colorBuildings,\n//             base_altitude: altitudeBuildings,\n//             extrusion_height: extrudeBuildings,\n//         }\n//     })\n// });\n\nconst wfsBuildingLayer = buildingLayer(\n    'https://wxs.ign.fr/topographie/geoportail/wfs?',\n    '2.0.0',\n    'BDTOPO_V3:batiment',\n    'EPSG:4326',\n    'IGN',\n    'application/json',\n    {\n        west: 0.67289,\n        east: 0.74665,\n        south: 45.17272,\n        north: 45.2135,\n    },\n    14\n);\nview.addLayer(wfsBuildingLayer);\n\nconst menuGlobe = new GuiTools('menuDiv', view);\n// Listen for globe full initialisation event\nview.addEventListener(itowns.GLOBE_VIEW_EVENTS.GLOBE_INITIALIZED, function () {\n    // eslint-disable-next-line no-console\n    console.info('Globe initialized');\n});\n\ndebug.createTileDebugUI(menuGlobe.gui, view);\n\nfunction picking(event) {\n    if (view.controls.isPaused) {\n        const htmlInfo = document.getElementById('info');\n        const intersects = view.pickObjectsAt(event, 3, 'WFS Building');\n        let properties;\n        let info;\n        let batchId;\n\n        htmlInfo.innerHTML = ' ';\n\n        if (intersects.length) {\n            batchId = intersects[0].object.geometry.attributes.batchId.array[intersects[0].face.a];\n            properties = intersects[0].object.feature.geometries[batchId].properties;\n\n            Object.keys(properties).map(function (objectKey) {\n                const value = properties[objectKey];\n                if (value) {\n                    const key = objectKey.toString();\n                    if (key[0] !== '_' && key !== 'geometry_name') {\n                        info = value.toString();\n                        htmlInfo.innerHTML += '<li><b>' + key + ': </b>' + info + '</li>';\n                    }\n                }\n            });\n        }\n    }\n}\n\nfor (const layer of view.getLayers()) {\n\n    if (layer.id === 'WFS Building') {\n        layer.whenReady.then(function _(layer) {\n            const gui = debug.GeometryDebug.createGeometryDebugUI(menuGlobe.gui, view, layer);\n            debug.GeometryDebug.addWireFrameCheckbox(gui, view, layer);\n            window.addEventListener('mousemove', picking, false);\n        });\n    }\n\n}"],"names":["$298c0b498438ffe5$var$meshes","$298c0b498438ffe5$export$80292fbeca38683e","properties","color","itowns","THREE","Color","usage_1","set","$298c0b498438ffe5$export$9b2f490cf77eeac0","altitude_minimale_sol","$298c0b498438ffe5$export$91275bb62d0ae4fd","hauteur","$298c0b498438ffe5$export$943863881665617f","proj4","defs","$2b6e161c9edcf319$var$placement","coord","Coordinates","range","tilt","$2b6e161c9edcf319$var$viewerDiv","document","getElementById","$2b6e161c9edcf319$var$view","GlobeView","$2b6e161c9edcf319$var$addElevationLayerFromConfig","config","source","WMTSSource","layer","ElevationLayer","id","addLayer","then","$2b6e161c9edcf319$var$menuGlobe","addLayerGUI","bind","setupLoadingScreen","Fetcher","json","ColorLayer","addFrameRequester","MAIN_LOOP_EVENTS","BEFORE_RENDER","i","mesh","length","view","notifyChange","camera","camera3D","scale","z","Math","min","updateMatrixWorld","filter","m","$2b6e161c9edcf319$var$wfsBuildingLayer","serverURL","version","nameType","crs","ipr","format","extent","zoomMinLayer","geometrySource","WFSSource","url","typeName","FeatureGeometryLayer","batchId","property","featureId","onMeshCreated","children","forEach","c","push","zoom","style","Style","fill","base_altitude","extrusion_height","meshList","west","east","south","north","GuiTools","$2b6e161c9edcf319$var$picking","event","controls","isPaused","htmlInfo","intersects","pickObjectsAt","info","innerHTML","object","geometry","attributes","array","face","a","feature","geometries","Object","keys","map","objectKey","value","key","toString","addEventListener","GLOBE_VIEW_EVENTS","GLOBE_INITIALIZED","console","debug","createTileDebugUI","gui","getLayers","whenReady","GeometryDebug","createGeometryDebugUI","addWireFrameCheckbox","window"],"version":3,"file":"index.1270febd.js.map"}