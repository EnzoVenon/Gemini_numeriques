{"mappings":"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","sources":["src/jsItown/plugins/FeatureToolTip.js"],"sourcesContent":["/* global itowns */\n/**\n * A tooltip that can display some useful information about a feature when\n * hovering it.\n *\n * @module FeatureToolTip\n *\n * @example\n * // Initialize the FeatureToolTip\n * FeatureToolTip.init(viewerDiv, view);\n *\n * // Add layers\n * var wfsSource = new itowns.WFSSource(...);\n * var wfsLayer = new itowns.ColorLayer('id_wfs', { source: wfsSource });\n * view.addLayer(wfsLayer);\n *\n * var fileSource = new itowns.FileSource(...);\n * var fileLayer = new itowns.GeometryLayer('id_myFile', new THREE.Group(), { source: fileSource });\n * view.addLayer(fileLayer);\n *\n * FeatureToolTip.addLayer(wfsLayer);\n * FeatureToolTip.addLayer(fileLayer);\n */\nvar FeatureToolTip = (function _() {\n    var tooltip;\n    var view;\n    var layers = [];\n    var layersId = [];\n\n    var mouseDown = 0;\n    document.body.addEventListener('mousedown', function _() {\n        ++mouseDown;\n    }, false);\n    document.body.addEventListener('mouseup', function _() {\n        --mouseDown;\n    }, false);\n\n    function moveToolTip(event) {\n        tooltip.innerHTML = '';\n        tooltip.style.display = 'none';\n\n        var features = view.pickFeaturesAt.apply(view, [event, 3].concat(layersId));\n\n        var layer;\n        for (var layerId in features) {\n            if (features[layerId].length == 0) {\n                continue;\n            }\n\n            layer = layers[layersId.indexOf(layerId)];\n            if (!layer) {\n                continue;\n            }\n            if (typeof layer.options.filterGeometries == 'function') {\n                features[layerId] = layer.options.filterGeometries(features[layerId], layer.layer) || [];\n            }\n            tooltip.innerHTML += fillToolTip(features[layerId], layer.layer, layer.options);\n        }\n\n        if (tooltip.innerHTML != '') {\n            tooltip.style.display = 'block';\n            tooltip.style.left = view.eventToViewCoords(event).x + 'px';\n            tooltip.style.top = view.eventToViewCoords(event).y + 'px';\n        }\n    }\n\n    function getGeometryProperties(geometry) {\n        return function properties() { return geometry.properties; };\n    }\n\n    function fillToolTip(features, layer, options) {\n        var content = '';\n        var feature;\n        var geometry;\n        var style;\n        var fill;\n        var stroke;\n        var symb = '';\n        var prop;\n\n        for (var p = 0; p < features.length; p++) {\n            feature = features[p];\n            geometry = feature.geometry;\n            style = (geometry.properties && geometry.properties.style) || feature.style || layer.style;\n            var context = { globals: {}, properties: getGeometryProperties(geometry) };\n            style = style.drawingStylefromContext(context);\n\n            if (feature.type === itowns.FEATURE_TYPES.POLYGON) {\n                symb = '&#9724';\n                if (style) {\n                    fill = style.fill && style.fill.color;\n                    stroke = style.stroke && ('1.25px ' + style.stroke.color);\n                }\n            } else if (feature.type === itowns.FEATURE_TYPES.LINE) {\n                symb = '&#9473';\n                fill = style && style.stroke && style.stroke.color;\n                stroke = '0px';\n            } else if (feature.type === itowns.FEATURE_TYPES.POINT) {\n                symb = '&#9679';\n                if (style && style.point) {  // Style and style.point can be undefined if no style options were passed\n                    fill = style.point.color;\n                    stroke = '1.25px ' + style.point.line;\n                }\n            }\n\n            content += '<div>';\n            content += '<span style=\"color: ' + fill + '; -webkit-text-stroke: ' + stroke + '\">';\n            content += symb + ' ';\n            content += '</span>';\n\n            if (geometry.properties) {\n                content += (geometry.properties.name || geometry.properties.nom || geometry.properties.description || layer.name || '');\n            }\n\n            if (feature.type === itowns.FEATURE_TYPES.POINT) {\n                content += '<br/><span class=\"coord\">long ' + feature.coordinates[0].toFixed(4) + '</span>';\n                content += '<br/><span class=\"coord\">lat ' + feature.coordinates[1].toFixed(4) + '</span>';\n            }\n\n            if (geometry.properties && !options.filterAllProperties) {\n                if (options.format) {\n                    for (prop in geometry.properties) {\n                        if (!options.filterProperties.includes(prop)) {\n                            content += options.format(prop, geometry.properties[prop]) || '';\n                        }\n                    }\n                } else {\n                    content += '<ul>';\n                    for (prop in geometry.properties) {\n                        if (!options.filterProperties.includes(prop)) {\n                            content += '<li>' + prop + ': ' + geometry.properties[prop] + '</li>';\n                        }\n                    }\n\n                    if (content.endsWith('<ul>')) {\n                        content = content.replace('<ul>', '');\n                    } else {\n                        content += '</ul>';\n                    }\n                }\n            }\n\n            content += '</div>';\n        }\n\n        return content;\n    }\n\n    return {\n        /**\n         * Initialize the `FeatureToolTip` plugin for a specific view.\n         *\n         * @param {Element} viewerDiv - The element containing the viewer.\n         * @param {View} viewer - The view to bind the tooltip to.\n         *\n         * @example\n         * const viewerDiv = document.getElementById('viewerDiv');\n         * const view = new GlobeView(viewerDiv, { longitude: 4, latitude: 45, altitude: 3000 });\n         *\n         * FeatureToolTip.init(viewerDiv, view);\n         *\n         * @memberof module:FeatureToolTip\n         */\n        init: function _(viewerDiv, viewer) {\n            // HTML element\n            tooltip = document.createElement('div');\n            tooltip.className = 'tooltip';\n            viewerDiv.appendChild(tooltip);\n\n            // View binding\n            view = viewer;\n\n            // Mouse movement listening\n            function onMouseMove(event) {\n                if (!mouseDown) {\n                    moveToolTip(event);\n                } else {\n                    tooltip.style.left = view.eventToViewCoords(event).x + 'px';\n                    tooltip.style.top = view.eventToViewCoords(event).y + 'px';\n                }\n            }\n\n            document.addEventListener('mousemove', onMouseMove, false);\n            document.addEventListener('mousedown', onMouseMove, false);\n        },\n\n        /**\n         * Add a layer to be picked by the tooltip.\n         *\n         * @param {Layer} layer - The layer to add.\n         * @param {Object} options - Options to have more custom content displayed.\n         * @param {function} [options.filterGeometries] - A callback to filter\n         * geometries following a criteria, like an id found on FeatureGeometry\n         * properties.  This is useful to remove duplicates, for example when a\n         * feature is present on multiple tiles at the same time (see the\n         * example below).  This function takes two parameters: a list of\n         * features (usually a `Array<Feature>`) and the `Layer` associated to\n         * these features.\n         * @param {function} [options.format] - A function that takes the name\n         * of the property currently being processed and its value, and gives\n         * the appropriate HTML output to it. If this method is specified, no\n         * others properties other than the ones handled in it will be\n         * displayed.\n         * @param {Array<string>} [options.filterProperties] - An array of\n         * properties to filter.\n         * @param {boolean} [options.filterAllProperties=true] - Filter all the\n         * properties, and don't display anything besides the name of the layer\n         * the feature is attached to.\n         *\n         * @return {Layer} The added layer.\n         *\n         * @example\n         * FeatureToolTip.addLayer(wfsLayer, {\n         *      filterProperties: ['uuid', 'notes', 'classification'],\n         *      filterGeometries: (features, layer) => {\n         *          const idList = [];\n         *          return features.filter((f) => {\n         *              if (!idList.includes(f.geometry.properties.id)) {\n         *                  idList.push(f.geometry.properties.id);\n         *                  return f;\n         *              }\n         *          });\n         *      }\n         * });\n         *\n         * @memberof module:FeatureToolTip\n         */\n        addLayer: function _(layer, options) {\n            if (!layer.isLayer) {\n                return layer;\n            }\n\n            var opts = options || { filterAllProperties: true };\n            opts.filterProperties = opts.filterProperties == undefined ? [] : opts.filterProperties;\n            opts.filterProperties.concat(['name', 'nom', 'style', 'description']);\n\n            layers.push({ layer: layer, options: opts });\n            layersId.push(layer.id);\n\n            return layer;\n        },\n    };\n}());\n\nif (typeof module != 'undefined' && module.exports) {\n    module.exports = FeatureToolTip;\n}\n"],"names":["FeatureToolTip","tooltip","view","layers","layersId","mouseDown","getGeometryProperties","geometry","properties","fillToolTip","features","layer","options","feature","style","fill","stroke","prop","content","symb","p","length","context","globals","drawingStylefromContext","type","itowns","FEATURE_TYPES","POLYGON","color","LINE","POINT","point","line","name","nom","description","coordinates","toFixed","filterAllProperties","format","filterProperties","includes","endsWith","replace","document","body","addEventListener","init","viewerDiv","viewer","onMouseMove","event","left","eventToViewCoords","x","top","y","innerHTML","display","pickFeaturesAt","apply","concat","layerId","indexOf","filterGeometries","moveToolTip","createElement","className","appendChild","addLayer","isLayer","opts","undefined","push","id","module","exports"],"version":3,"file":"index.8872b7cc.js.map"}