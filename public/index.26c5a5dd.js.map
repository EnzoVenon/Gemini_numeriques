{"mappings":"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","sources":["src/js/jsItown/plugins/FeatureToolTip2.js"],"sourcesContent":["// const { GeometryLayer } = require(\"itowns\");\n\n/**\n * A tooltip that can display some useful information about a feature when\n * hovering it.\n *\n * @module FeatureToolTip\n *\n * @example\n * // Initialize the FeatureToolTip\n * FeatureToolTip.init(viewerDiv, view);\n *\n * // Add layers\n * var wfsSource = new itowns.WFSSource(...);\n * var wfsLayer = new itowns.ColorLayer('id_wfs', { source: wfsSource });\n * view.addLayer(wfsLayer);\n *\n * var fileSource = new itowns.FileSource(...);\n * var fileLayer = new itowns.GeometryLayer('id_myFile', new THREE.Group(), { source: fileSource });\n * view.addLayer(fileLayer);\n *\n * FeatureToolTip.addLayer(wfsLayer);\n * FeatureToolTip.addLayer(fileLayer);\n */\nvar FeatureToolTip = (function _() {\n    var tooltip;\n    var view;\n    var layers = [];\n    var layersId = [];\n\n    var mouseevent;\n\n    var mouseDown = 0;\n    document.body.addEventListener('mousedown', function _() {\n        ++mouseDown;\n    }, false);\n\n    document.body.addEventListener('mouseup', function _(event) {\n        if (event.target.id === \"\") {\n            --mouseDown;\n        }\n    }, false);\n\n    function moveToolTip(event) {\n        tooltip.innerHTML = '';\n        tooltip.style.display = 'none';\n        var features = view.pickFeaturesAt.apply(view, [event, 2].concat(layersId));\n        var layer;\n\n        for (var layerId in features) {\n            if (features[layerId].length == 0) {\n                continue;\n            }\n\n            layer = layers[layersId.indexOf(layerId)];\n            console.log(layer)\n            console.log(layer.layer.source)\n            console.log(layer.layer.source.features)\n            if (!layer) {\n                continue;\n            }\n            if (typeof layer.options.filterGeometries == 'function') {\n                features[layerId] = layer.options.filterGeometries(features[layerId], layer.layer) || [];\n            }\n            tooltip.innerHTML += fillToolTip(features[layerId], layer.layer);\n        }\n        tooltip.innerHTML = \"\";\n\n        if (tooltip.innerHTML != '') {\n            tooltip.style.display = 'block';\n            tooltip.style.left = view.eventToViewCoords(event).x + 'px';\n            tooltip.style.top = view.eventToViewCoords(event).y + 'px';\n        }\n\n    }\n\n    function getGeometryProperties(geometry) {\n        return function properties() {\n            return geometry.properties;\n        };\n    }\n\n\n    function fillToolTip(features, layer) {\n        var content = '';\n\n        var feature;\n        var geometry;\n        var style;\n\n        console.log(features)\n\n        for (var p = 0; p < features.length; p++) {\n            feature = features[p];\n            geometry = feature.geometry;\n\n            console.log(geometry)\n\n\n            tooltip.value = geometry\n\n            style = (geometry.properties && geometry.properties.style) || feature.style || layer.style;\n            var context = { globals: {}, properties: getGeometryProperties(geometry) };\n            style = style.drawingStylefromContext(context);\n\n            content = ''\n        }\n\n\n        return content;\n    }\n\n    return {\n        /**\n         * Initialize the `FeatureToolTip` plugin for a specific view.\n         *\n         * @param {Element} viewerDiv - The element containing the viewer.\n         * @param {View} viewer - The view to bind the tooltip to.\n         *\n         * @example\n         * const viewerDiv = document.getElementById('viewerDiv');\n         * const view = new GlobeView(viewerDiv, { longitude: 4, latitude: 45, altitude: 3000 });\n         *\n         * FeatureToolTip.init(viewerDiv, view);\n         *\n         * @memberof module:FeatureToolTip\n         */\n        init: function _(viewerDiv, viewer) {\n            // HTML element\n            tooltip = document.createElement('div');\n            tooltip.className = 'tooltip';\n            tooltip.id = 'tooltip';\n\n            mouseevent = document.createElement('div');\n            mouseevent.className = 'mouseevent';\n            mouseevent.id = 'mouseevent';\n\n\n            viewerDiv.appendChild(tooltip);\n            viewerDiv.appendChild(mouseevent);\n\n\n            // View binding\n            view = viewer;\n\n            // Mouse movement listening\n            function onMouseMove(event) {\n                if (mouseDown) {\n                    moveToolTip(event);\n\n                    mouseevent.value = event;\n\n\n                    tooltip.innerHTML = '<div class=\"wrapper\"><div class=\"tabs\">' + tooltip.innerHTML + '</div></div>';\n\n                    tooltip.addEventListener('mouseover', () => {\n                        document.removeEventListener('mousedown', onMouseMove);\n                    })\n                    tooltip.addEventListener('mouseout', () => {\n                        document.addEventListener('mousedown', onMouseMove);\n                    })\n\n                    tooltip.addEventListener\n\n                    console.log(tooltip)\n                } else {\n                    tooltip.style.left = (view.eventToViewCoords(event).x) + 'px';\n                    tooltip.style.bottom = (view.eventToViewCoords(event).y) + 'px';\n                }\n            }\n\n            document.addEventListener('mousedown', onMouseMove, false);\n        },\n\n        /**\n         * Add a layer to be picked by the tooltip.\n         *\n         * @param {Layer} layer - The layer to add.\n         * @param {Object} options - Options to have more custom content displayed.\n         * @param {function} [options.filterGeometries] - A callback to filter\n         * geometries following a criteria, like an id found on FeatureGeometry\n         * properties.  This is useful to remove duplicates, for example when a\n         * feature is present on multiple tiles at the same time (see the\n         * example below).  This function takes two parameters: a list of\n         * features (usually a `Array<Feature>`) and the `Layer` associated to\n         * these features.\n         * @param {function} [options.format] - A function that takes the name\n         * of the property currently being processed and its value, and gives\n         * the appropriate HTML output to it. If this method is specified, no\n         * others properties other than the ones handled in it will be\n         * displayed.\n         * @param {Array<string>} [options.filterProperties] - An array of\n         * properties to filter.\n         * @param {boolean} [options.filterAllProperties=true] - Filter all the\n         * properties, and don't display anything besides the name of the layer\n         * the feature is attached to.\n         *\n         * @return {Layer} The added layer.\n         *\n         * @example\n         * FeatureToolTip.addLayer(wfsLayer, {\n         *      filterProperties: ['uuid', 'notes', 'classification'],\n         *      filterGeometries: (features, layer) => {\n         *          const idList = [];\n         *          return features.filter((f) => {\n         *              if (!idList.includes(f.geometry.properties.id)) {\n         *                  idList.push(f.geometry.properties.id);\n         *                  return f;\n         *              }\n         *          });\n         *      }\n         * });\n         *\n         * @memberof module:FeatureToolTip\n         */\n        addLayer: function _(layer, options) {\n            if (!layer.isLayer) {\n                return layer;\n            }\n            var opts = options || { filterAllProperties: true };\n            opts.filterProperties = opts.filterProperties == undefined ? [] : opts.filterProperties;\n            opts.filterProperties.concat(['name', 'nom', 'style', 'description']);\n\n            layers.push({ layer: layer, options: opts });\n            layersId.push(layer.id);\n\n            return layer;\n        },\n    };\n}());\n\nif (typeof module != 'undefined' && module.exports) {\n    module.exports = FeatureToolTip;\n}"],"names":["FeatureToolTip","tooltip","view","mouseevent","layers","layersId","mouseDown","getGeometryProperties","geometry","properties","fillToolTip","features","layer","feature","style","content","console","log","p","length","value","context","globals","drawingStylefromContext","document","body","addEventListener","event","target","id","init","viewerDiv","viewer","createElement","className","appendChild","onMouseMove","innerHTML","display","pickFeaturesAt","apply","concat","layerId","indexOf","source","options","filterGeometries","left","eventToViewCoords","x","top","y","moveToolTip","removeEventListener","bottom","addLayer","isLayer","opts","filterAllProperties","filterProperties","undefined","push","module","exports"],"version":3,"file":"index.26c5a5dd.js.map"}